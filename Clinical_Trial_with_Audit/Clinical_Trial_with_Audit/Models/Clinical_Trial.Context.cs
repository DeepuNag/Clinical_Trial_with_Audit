//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Clinical_Trial_with_Audit.Models
{
    using Clinical_Trial.Models;
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    
    public partial class ClinicalTrial_Context : DbContext
    {
        private AuditTrailFactory auditFactory;
        private List<AuditLog> auditList = new List<AuditLog>();
        private List<DbEntityEntry> objectList = new List<DbEntityEntry>();
        public ClinicalTrial_Context()
            : base("name=ClinicalTrial_Context")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
        public override int SaveChanges()
        {
            using (var ctx = new ClinicalTrial_Context())
            {
                
                auditList.Clear();
                objectList.Clear();
                auditFactory = new AuditTrailFactory(this);
                try
                {
                    var changeTracker = ctx.ChangeTracker;
                    var entries = changeTracker.Entries();

                    //var entityList = ChangeTracker.Entries();

                    foreach (var entity in entries)
                    {
                        AuditLog audit = auditFactory.GetAudit(entity);
                        bool isValid = true;
                        if (entity.State == EntityState.Modified && string.IsNullOrWhiteSpace(audit.NewValue) && string.IsNullOrWhiteSpace(audit.OldValue))
                        {
                            isValid = false;
                        }
                        if (isValid)
                        {
                            auditList.Add(audit);
                            objectList.Add(entity);
                        }
                    }
                }

                catch (Exception e)
                {
                    Console.Write(e);
                }

                var retVal = base.SaveChanges();
                if (auditList.Count > 0)
                {
                    int i = 0;
                    foreach (var audit in auditList)
                    {
                        if (audit.AuditType == AuditActions.I.ToString())
                            audit.Reg_No = auditFactory.GetKeyValue(objectList[i]);
                        this.AuditLogs.Add(audit);
                        i++;
                    }

                    base.SaveChanges();
                }

                return retVal;
            }
        }
        public virtual DbSet<AuditLog> AuditLogs { get; set; }
        public virtual DbSet<Tbl_Audit_Register_user> Tbl_Audit_Register_user { get; set; }
        public virtual DbSet<Tbl_Audit_user_Registration> Tbl_Audit_user_Registration { get; set; }
        public virtual DbSet<Tbl_Clinical_Trials> Tbl_Clinical_Trials { get; set; }
        public virtual DbSet<Tbl_Register_user> Tbl_Register_user { get; set; }
        public virtual DbSet<Tbl_Trial_Type> Tbl_Trial_Type { get; set; }
        public virtual DbSet<Tbl_User> Tbl_User { get; set; }
        public virtual DbSet<Tbl_User_Registration> Tbl_User_Registration { get; set; }
    }
}
